// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api";

export interface AccumulateRequest {
  id: string;
  number: number;
}

export interface FinishPipelineRequest {
  id: string;
}

export interface AccumulateResponse {
  id: string;
  soFar: number;
}

export interface FinishResponse {
  id: string;
  sum: number;
}

function createBaseAccumulateRequest(): AccumulateRequest {
  return { id: "", number: 0 };
}

export const AccumulateRequest: MessageFns<AccumulateRequest> = {
  encode(message: AccumulateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.number !== 0) {
      writer.uint32(16).int64(message.number);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccumulateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumulateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.number = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccumulateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
    };
  },

  toJSON(message: AccumulateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccumulateRequest>, I>>(base?: I): AccumulateRequest {
    return AccumulateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccumulateRequest>, I>>(object: I): AccumulateRequest {
    const message = createBaseAccumulateRequest();
    message.id = object.id ?? "";
    message.number = object.number ?? 0;
    return message;
  },
};

function createBaseFinishPipelineRequest(): FinishPipelineRequest {
  return { id: "" };
}

export const FinishPipelineRequest: MessageFns<FinishPipelineRequest> = {
  encode(message: FinishPipelineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinishPipelineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinishPipelineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinishPipelineRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FinishPipelineRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinishPipelineRequest>, I>>(base?: I): FinishPipelineRequest {
    return FinishPipelineRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinishPipelineRequest>, I>>(object: I): FinishPipelineRequest {
    const message = createBaseFinishPipelineRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAccumulateResponse(): AccumulateResponse {
  return { id: "", soFar: 0 };
}

export const AccumulateResponse: MessageFns<AccumulateResponse> = {
  encode(message: AccumulateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.soFar !== 0) {
      writer.uint32(16).int64(message.soFar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccumulateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumulateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.soFar = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccumulateResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      soFar: isSet(object.soFar) ? globalThis.Number(object.soFar) : 0,
    };
  },

  toJSON(message: AccumulateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.soFar !== 0) {
      obj.soFar = Math.round(message.soFar);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccumulateResponse>, I>>(base?: I): AccumulateResponse {
    return AccumulateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccumulateResponse>, I>>(object: I): AccumulateResponse {
    const message = createBaseAccumulateResponse();
    message.id = object.id ?? "";
    message.soFar = object.soFar ?? 0;
    return message;
  },
};

function createBaseFinishResponse(): FinishResponse {
  return { id: "", sum: 0 };
}

export const FinishResponse: MessageFns<FinishResponse> = {
  encode(message: FinishResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sum !== 0) {
      writer.uint32(16).int64(message.sum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinishResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinishResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sum = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinishResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sum: isSet(object.sum) ? globalThis.Number(object.sum) : 0,
    };
  },

  toJSON(message: FinishResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sum !== 0) {
      obj.sum = Math.round(message.sum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinishResponse>, I>>(base?: I): FinishResponse {
    return FinishResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinishResponse>, I>>(object: I): FinishResponse {
    const message = createBaseFinishResponse();
    message.id = object.id ?? "";
    message.sum = object.sum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
